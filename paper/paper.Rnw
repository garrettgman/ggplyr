%% LyX 2.0.3 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\usepackage[round]{natbib}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\usepackage{breakurl}
\begin{document}

<<setup,echo=FALSE,results=hide,message=FALSE>>=
# this is equivalent to \SweaveOpts{...}
opts_chunk$set(fig.path='figure/', fig.align='center', fig.show='hold', fig.lp='fig:', cache.path = 'cache/', cache = TRUE, tidy = FALSE)
opts_knit$set(replace.assign=TRUE, width=90)
setwd("/Users/GarrettsiMac/Documents/git/ggplyr")
library(devtools)
load_all("../ggplyr")
@


\title{A Minimal Demo of \texttt{glyphmaps}}


\author{Garrett Grolemund}

\maketitle
This document demonstrates the basic features of the \texttt{glyphmaps} package (name may change). \texttt{glyphmaps} was written to create plots like the ones below, which recreate plots similar to those in \citet{wickham2011split} and \citet{wickham2012glyph}. Both plots were made with \texttt{glyphmaps}. To run the examples in this document please download the \texttt{glyphmaps} package with the code below. 


<<install, eval = FALSE>>=
library(devtools)
install_github("ggplyr", "garrettgman", "glyphmaps")
library(glyphmaps)
@

<<glyphmaps-fig-11, fig.width = 6, fig.height = 3, out.width = 1.05\textwidth, cache = TRUE, tidy = FALSE>>=
ggplot(seasons) + map_us + 
  grid(geom_line(aes(x = time, y = pred)), 
    grid.aes = aes(lon, lat), x.nbin = 58, y.nbin = 25,
    ref = ref_box(aes(fill = avg), alpha = 0.2, color = NA))
@

<<split-fig, fig.width = 7, fig.height = 5, out.width = 0.8\textwidth, cache = TRUE, tidy = FALSE>>=
ggplot(nasa) +  map_nasa +
  glyph(geom_star(aes(r = ozone, angle = date, x = 0, y = 0, fill = mean(temperature))), 
  major.aes = aes(long[1], lat[1]), glyph.by = c("long", "lat"))
@

\texttt{glyphmaps} helps users create embedded graphics: plots that have subplots built into them. The package is built around three main functions: \texttt{grid}, \texttt{glyph}, and \texttt{ply$\_$aes}. This demo will demonstrate these three functions, their options, and the various uses of embedded graphics. 

\section{Glyphs}
Glyphs are geometric objects (i.e, geoms) that display information within the geom. In other words, a glyph can display information even if it is drawn by itself, without references to an external coordinate system. In reality, all geoms are a type of glyph, but the term glyph is usually reserved for complicated geoms, such as those that contain their own internal coordinate systems. The star glyphs in Figure~\ref{fig:star-glyphs} illustrate how glyphs can contain an internal (minor) coordinate system and can still be plotted in an external (major) coordinate system.

<<star-glyphs, fig.width=3,fig.height=3, out.width = 0.49\textwidth, echo = FALSE, cache = TRUE, fig.cap = 'Individual star glyphs comprise a complete polar plot with an internal coordinate system (r = temperature and angle = date). Multiple star glyphs can be organized with an external coordinate sytem to reveal second order effects.'>>=
one <- subset(nasa, id == "3-1")
# single glyph
ggplot(one) + geom_line(aes(x = date, y = temperature)) + coord_polar()
# embedded
ggplot(nasa) + map_nasa + glyph(geom_star(aes(r = temperature, angle = date, x = 0, y = 0)), major.aes = aes(long[1], lat[1]), glyph.by = c("long", "lat"))
@

Glyphs provide one connection between the grammar and graphics and embedded plots. Every glyph is an embedded plot and each embedded plot is a type of glyph. Hence, we can treat embedded plots as a type of geom. Embedded plots can also be thought of as facetting on a continuous scale. However, since embedded plots are often used with other non-facetted layers, it is easier to implement embedded plots as a type of geom.

\subsection{glyph}
\texttt{glyph} provides a general method for creating glyph geoms in \texttt{ggplot2}. \texttt{glyph} works in conjunction with \texttt{ggplot2} layer objects in the following way. Each layer specifies a type of graph through a combination of geom, stat, aesthetics, parameters, and a position adjustment. \texttt{glyph} uses this specification to build the individual glyphs (i.e, \texttt{glyph} builds glyphs that match the plot specified by the layer). \texttt{glyph} will plot a separate glyph for different subsets of the layer's data. Users specify how to split the data into subsets with the \texttt{glyph.by} argument. This argument behaves similarly to the \texttt{.variables} argument in the \texttt{plyr} package \citep{wickham2011split}. Finally, \texttt{glyph} plots each glyph on the x and y axis specified by the \texttt{major.aes} argument. These ``major axiis'' are mapped to the data just as other \texttt{ggplot2} aesthetics are mapped to the data. Hence they should be specified with the \texttt{aes} function.

To summarize, a layer can be turned into a set of glyphs with the glyph function and three arguments:
<<glyph-example, fig.width = 4, fig.height = 4, out.width = 0.49\textwidth, cache = TRUE, fig.caption = 'Any layer can be made into a collection of glyphs with \texttt{glyph}. The major.aes argument separates glyph from regular grouping (which it may resemble); each glyph can be plotted on new axes independent of the axes used to build its contents.'>>= 
points <- geom_point(aes(x = surftemp, y = temperature), size = 1/2)
## A normal plot
ggplot(nasa) + points
## Glyphed plot
ggplot(nasa) + glyph(layer = points, major = aes(x = long[1], y = lat[1]), glyph.by = c("lat", "long"))
@

\texttt{glyph} gives users incredible freedom to design their own types of glyphs. Any graph that can be specified with a single layer in \texttt{ggplot2} can be turned into a glyph. \texttt{glyphmaps} also provides two new geoms that can be used to create frequently seen glyphs. These are \texttt{geom$\_$star} and \texttt{geom$\_$coxcomb}, see Figure~\ref{fig:star}. Although coxcomb glyphs don't seem much better than Venn pie-agrams (which I suppose we could also do with glyphmaps).
<<star, fig.width = 4, fig.height = 3, out.width = 0.49\textwidth, cache = TRUE, fig.caption = 'Two new geoms to be used with \texttt{glyphmaps}.'>>=
ggplot(nasa) + geom_star(aes(r = ozone, angle = date, x = 0, y = 0, fill = mean(ozone)), alpha = 0.5)
ggplot(seasons) + geom_coxcomb(aes(angle = state, fill = lat))
@

\texttt{glyph} also has a variety of optional arguments that allow users to customize glyph plots. These allow the user to control the dimensions of each glyph, to control the scale within each glyph, to add reference objects to each glyph, and to merge glyphs that overlap into a single glyph.

\subsubsection{width, height}
The \texttt{width} and \texttt{height} arguments of \texttt{glyph} control the width and height of each glyph in the plot.
<<dims, fig.width = 4, fig.height = 3, out.width = 0.49\textwidth, cache = TRUE, tidy = FALSE, fig.caption = 'Control glyph dimensions with width and height.'>>=
ggplot(mpg) + glyph(geom_bar(aes(x = trans, fill = year)), 
  aes(x = mean(displ), y = mean(cty)), c("year"))
ggplot(mpg) + glyph(geom_bar(aes(x = trans, fill = year)), 
  aes(x = mean(displ), y = mean(cty)), c("year"), 
  width = 1/4, height = 1/4)
@

\subsubsection{x$\_$scale, y$\_$scale}
The \texttt{x$\_$scale} and \texttt{y$\_$scale} arguments of \texttt{glyph} control the scaling within each glyph. As with facets, glyphs share the same scaling by default. The x and y scales can also be set to `free'.
<<scales, fig.width = 4, fig.height = 3, out.width = 0.49\textwidth, cache = TRUE, tidy = FALSE, fig.caption = 'Control glyph scales with x$\_$scale and y$\_$scale.'>>=
## glyphs share y scale
ggplot(mpg) + glyph(geom_bar(aes(x = trans, fill = year)), 
  aes(x = mean(displ), y = mean(cty)), c("year"), 
  width = 1/4, height = 1/4)
## independent y scales
ggplot(mpg) + glyph(geom_bar(aes(x = trans, fill = year)), 
  aes(x = mean(displ), y = mean(cty)), c("year"),
  width = 1/4, height = 1/4, y_scale = free)
@

\subsubsection{reference objects}
Users can set the \texttt{reference} argument to include reference objects with each glyph. These objects provide a frame of reference which facilitates comparing between glyphs. The \texttt{reference} argument should be set to one of \texttt{ref$\_$box}, \texttt{ref$\_$hline}, \texttt{ref$\_$vline}, \texttt{ref$\_$points}, or \texttt{NULL}. Each of these functions creates a different type of reference object, see Figure~\ref{fig:refs}. Each also accepts a mapping and parameters to customize the appearance of the reference objects.
<<refs, fig.width = 4, fig.height = 3, out.width = 0.49\textwidth, cache = TRUE, tidy = FALSE, fig.caption = 'Four types of reference objects that can be used with glyphs.'>>=
# boxes
ggplot(test.data) + glyph(geom_point(aes(Fertility, Agriculture, 
  color = rank(Catholic))), glyph.by = c("lat", "long"), 
  major = aes(mean(Fertility), mean(Education)), ref = ref_box(aes(fill = 
  mean(Catholic))))

# hlines
ggplot(test.data) + glyph(geom_point(aes(Fertility, Agriculture, 
  color = rank(Catholic))), glyph.by = c("lat", "long"), 
  major = aes(mean(Fertility), mean(Education)), ref = ref_hline(aes(fill = 
  mean(Catholic))))

# vlines
ggplot(test.data) + glyph(geom_point(aes(Fertility, Agriculture, 
  color = rank(Catholic))), glyph.by = c("lat", "long"), 
  major = aes(mean(Fertility), mean(Education)), ref = ref_vline(aes(fill = 
  mean(Catholic))))
  
# points
ggplot(mpg) + glyph(geom_bar(aes(x = trans, fill = year)), 
  aes(x = mean(displ), y = mean(cty)), c("year"), y_scale = free, 
  width = 1/3, height = 1/3, reference = ref_points(aes(fill = mean(hwy))))
@

\subsection{merge overlaps}
Often two or more glyphs will overlap each other when plotted. It is possible to combine such overlapping glyphs into a single glyph by setting the \texttt{merge.overlaps} argument to \texttt{TRUE}. \texttt{glyphmaps} will then screen the glyph output for sets of overlapping graphs. Each set will be combined into one glyph and plotted at the at the average location of the combined glyphs, see Figure~\ref{fig:overlaps}.
Caution should be used when setting \texttt{merge.overlaps} to \texttt{TRUE}. Merge overlaps currently works \emph{exactly} as described, which means that for very dense graphs, \texttt{merge.overlaps} is likely to thin out the plot a bit more than the user expects.
<<overlaps, fig.width = 4, fig.height = 3, out.width = 0.49\textwidth, cache = TRUE, tidy = FALSE, fig.caption = 'Merging overlaps can be a barrel of laughs ...to program.'>>=
## no merging 
ggplot(test.data) + glyph(geom_point(aes(Fertility, Agriculture, 
  color = rank(Catholic)), size = 3), glyph.by = c("lat", "long"), 
  major = aes(mean(Fertility), mean(Education)), ref = ref_box(aes(fill = 
  mean(Catholic))), width = rel(1), height = rel(1))
## merging
ggplot(test.data) + glyph(geom_point(aes(Fertility, Agriculture, 
  color = rank(Catholic)), size = 3), glyph.by = c("lat", "long"), 
  major = aes(mean(Fertility), mean(Education)), ref = ref_box(aes(fill = 
  mean(Catholic))), merge = TRUE, width = rel(1), height = rel(1))

## compare with dense situations
ggplot(seasons) + map_us + 
  glyph(geom_line(aes(x = time, y = pred)), 
    aes(lon[1], lat[1]), c("stn"), height = 1, width = 1.5,
       ref = ref_box(aes(fill = avg), color = NA))
## vs
ggplot(seasons) + map_us + 
  glyph(geom_line(aes(x = time, y = pred)), 
    aes(lon[1], lat[1]), c("stn"), height = 1, width = 1.5,
       ref = ref_box(aes(fill = avg), color = NA), merge = TRUE)
@

\subsection{grid}
Gridding is the simplest way to embed subplots in a graph. \texttt{grid} basically bins a layer into a 2d grid of subplots and plots a glyph at every bin location. The syntax of \texttt{grid} is very similar to that of \texttt{glyph}. However, \texttt{grid} does not take \texttt{width}, \texttt{height}, or \texttt{merge.overlaps} arguments. the dimension of the glyphs (and the lack of overlaps) is implicit in the intention to grid a layer. Instead, \texttt{grid} takes two new arguments" \texttt{x.nbin} and \texttt{y.nbin}. These specify the number of bins to use on the x and y axiis. They are set to ten by default. 
Like \texttt{glyph}, \texttt{grid} can take reference and scale arguments.

<<grids, fig.width = 4, fig.height = 3, out.width = 0.49\textwidth, cache = TRUE, tidy = FALSE, fig.caption = 'An example of gridding. The graph on the front page of this article was also constructed with \texttt{grid}.'>>=
## without gridding
ggplot(test.data) + geom_point(aes(Fertility, Education))
## with gridding
ggplot(test.data) + 
  grid(geom_point(aes(Fertility, Education)), x.nbin = 10, y.nbin = 10, 
       ref= ref_box(aes(fill = mean(Catholic))))
@

Gridding provides a new way to approach the problem of overplotting. A grid of glyphs can work like a bin2d but provides more information. Figure~\ref{fig:overplotting} demonstrates this approach by recreating an overplotting graph that has garnered recent interest on the ggplot2 mailing list. 

<<overplotting, fig.width = 6, fig.height = 5, out.width = \textwidth, cache = TRUE, tidy = FALSE, fig.caption = 'A recreation of a plot from Hadley's webinar. The glyphmaps differs from the original in that the stroke of the reference box is not mapped to the count within the box. Glyphmaps currently only calculates stats at the subplot levels.'>>=
## without gridding
cheap.diamonds <- subset(diamonds, price <= 5000 & price >= 600)
ggplot(cheap.diamonds) +
  grid(geom_bar(aes(x = color, fill = color), position = "dodge"),
    grid.aes = aes(x = carat, y = price), x.nbin = 10, y.nbin = 14,
    y_scale = free, height.adjust = 0.5, width.adjust = 0.5,
    ref = ref_box(aes(color = mean(as.numeric(color)))))
@

\subsection{ply\_aes}

\texttt{ply\_aes} wraps a layer like \texttt{grid} or \texttt{glyph} and causes the aesthetics to be calculated in a groupwise manner. Users can specify the groups to use, or \texttt{ply$\_$aes} will default to any groupings provided by glyph.by or group.by parameters, or a group aesthetic.

<<groupwise1, fig.width = 4, fig.height = 3, out.width = 0.49\textwidth, cache = TRUE, tidy = FALSE, fig.caption = '\texttt{ply$\_$aes} forces aesthetics to be calculated within groups.'>>=
## normal \texttt{ggplot2} behavior
ggplot(mpg) + geom_point(aes(hwy, cty, color = rank(displ))) + 
  facet_wrap(~cyl)
## groupwise aesthetics
ggplot(mpg) + ply_aes(geom_point(aes(hwy, cty, color = rank(displ))), 
  c("cyl")) + facet_wrap(~cyl)
@

\texttt{ply$\_$aes} doesn't actually create embedded plots, but is closely related to the glyphing process. By default, \texttt{ggplot2} does not calculate statistics in a groupwise manner. However, such calculations can be useful in certain situations. For example, \texttt{ply$\_$aes} is built into \texttt{glyph} and \texttt{grid} by default; embedded plots quickly become boring when aesthetics do not vary from subplot to subplot. Groupwise aesthetics can be interesting in other situations as well. For example, Figure~\ref{fig:groupwise2} demonstrates how groupwise aesthetics can be used to avoid overplotting.
<<groupwise2, fig.width = 4, fig.height = 3, out.width = 0.49\textwidth, cache = TRUE, tidy = FALSE, fig.caption = '\texttt{ply$\_$aes} provides another way to deal with overplotting.'>>=
## overplotted
ggplot() + geom_point(aes(x = temperature, y = ozone, color = lat), data = nasa, size = 1/2)  
# using ply_aes to plot just summaries
ggplot() + ply_aes(geom_point(aes(x = mean(temperature), y = mean(ozone), 
  color = lat[1]), data = nasa, size = 1/2), c("lat", "long"))
@



\section{speed considerations}
Embedding plots is computationally expensive. Such plots require much of both the computational engine of R and the graphics device. Hence, it is not unreasonable to expect \texttt{glyphmaps} to be slow, which it can be. However, relative to similar visual tasks \texttt{glyphmaps} is surprisingly fast. The final code chunk compares the speed of plotting forty thousand points in an embedded plot to plotting the same points in a facetted plot. \texttt{glyphmaps} performs quite well in comparison.

<<<<speed-test, fig.width = 4, fig.height = 3, out.width = 0.49\textwidth, cache = TRUE, tidy = FALSE, fig.caption = 'Plot speeds for an embedded plot vs. a facetted plot. Originally run on my iMac desktop.'>>=
## embedded plot
system.time(print(ggplot(nasa) + glyph(geom_point(aes(x = surftemp, 
  y = temperature), size = 1/2), aes(x = long[1], y = lat[1]), c("lat", "long"))))

## facetted plot
system.time(print(ggplot(nasa) + geom_point(aes(x = surftemp, 
  y = temperature), size = 1/2) + facet_grid(long~lat))))
@


\bibliographystyle{plainnat}
\bibliography{ggplyr}
\end{document}